import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import logging
import os
import numpy as np
from sklearn.preprocessing import LabelEncoder


# Thi·∫øt l·∫≠p logging
log_dir = "./logs"
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, "preprocess.log")

logging.basicConfig(
    filename=log_file,
    encoding='utf-8',
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def main():
    try:
        logging.info("üöÄ === B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu ===")

        # ƒê∆∞·ªùng d·∫´n
        file_path = "./data/raw/train.csv"
        test_file_path = "./data/raw/test.csv"
        sample_submission_path = "./data/raw/sample_submission.csv"
        output_path = "./data/processed/train_selected_cleaned.csv"
        heatmap_path = "./results/heatmap_selected_features_1.png"
        matrix_path = "./results/correlation_matrix.png"

        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        os.makedirs(os.path.dirname(heatmap_path), exist_ok=True)
        os.makedirs(os.path.dirname(matrix_path), exist_ok=True)


        # ƒê·ªçc d·ªØ li·ªáu
        df = pd.read_csv(file_path)
        df_test = pd.read_csv(test_file_path)
        df_submission = pd.read_csv(sample_submission_path)

        logging.info(f"üìÑ ƒê√£ ƒë·ªçc train.csv: {df.shape[0]} d√≤ng, {df.shape[1]} c·ªôt")
        logging.info(f"üìÑ ƒê√£ ƒë·ªçc test.csv: {df_test.shape[0]} d√≤ng, {df_test.shape[1]} c·ªôt")
        logging.info(f"üìÑ ƒê√£ ƒë·ªçc sample_submission.csv: {df_submission.shape[0]} d√≤ng, {df_submission.shape[1]} c·ªôt")

        # T·∫°o ƒë·∫∑c tr∆∞ng m·ªõi - Age_Group
        age_bins = [0, 12.9, 19.9, 29.9, 44.9, 59.9, np.inf]
        age_labels = ['Child', 'Teen', 'YoungAdult', 'Adult', 'MiddleAge', 'Senior']

        df['Age_Group'] = pd.cut(df['Age'], bins=age_bins, labels=age_labels)
        df_test['Age_Group'] = pd.cut(df_test['Age'], bins=age_bins, labels=age_labels)

        logging.info("üß† ƒê√£ t·∫°o ƒë·∫∑c tr∆∞ng m·ªõi 'Age_Group' d·ª±a tr√™n c·ªôt 'Age'")

        # In v√†i d√≤ng v√≠ d·ª• t·ª´ train: id, Age, Age_Group
        sample_preview = df[['Age', 'Age_Group']].head()
        logging.info("üîç M·ªôt v√†i d√≤ng m·∫´u t·ª´ train.csv v·ªõi 'Age' v√† 'Age_Group':\n" + sample_preview.to_string(index=False))

                # ====== PH√ÇN T√çCH KH√ÅM PH√Å D·ªÆ LI·ªÜU (EDA) ======
        logging.info("üîç === B·∫Øt ƒë·∫ßu ph√¢n t√≠ch kh√°m ph√° d·ªØ li·ªáu (EDA) ===")

        # Ki·ªÉm tra c·∫•u tr√∫c
        logging.info(f"üìä Th√¥ng tin DataFrame:\n{df.info()}")

        # Ki·ªÉm tra gi√° tr·ªã thi·∫øu
        missing_values = df.isnull().sum()
        logging.info(f"‚ùì S·ªë l∆∞·ª£ng gi√° tr·ªã thi·∫øu:\n{missing_values[missing_values > 0]}")

        # Ki·ªÉm tra ph√¢n b·ªë bi·∫øn m·ª•c ti√™u (target)
        TARGET_COLUMN = 'NObeyesdad'
        target_counts = df[TARGET_COLUMN].value_counts()
        logging.info(f"üéØ Ph√¢n b·ªë bi·∫øn m·ª•c ti√™u '{TARGET_COLUMN}':\n{target_counts}")

        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë l·ªõp target
        plt.figure(figsize=(8, 5))
        sns.countplot(x=TARGET_COLUMN, data=df, order=target_counts.index)
        plt.xticks(rotation=45)
        plt.title("Ph√¢n b·ªë c√°c l·ªõp c·ªßa bi·∫øn m·ª•c ti√™u")
        plt.tight_layout()
        plt.savefig("./results/target_distribution.png")
        plt.close()
        logging.info("üìà ƒê√£ l∆∞u bi·ªÉu ƒë·ªì ph√¢n b·ªë bi·∫øn m·ª•c ti√™u t·∫°i ./results/target_distribution.png")

        # Lo·∫°i b·ªè c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt cho ph√¢n t√≠ch
        df_eda = df.drop(columns=['id','Age'])  # N·∫øu c√≥ 'id' th√¨ th√™m v√†o ƒë√¢y: ['id', 'Age']
        features = df_eda.drop(columns=[TARGET_COLUMN]).columns.tolist()

        # Ph√¢n lo·∫°i features
        numerical_cols_eda = df_eda[features].select_dtypes(include=['int64', 'float64']).columns.tolist()
        categorical_cols_eda = df_eda[features].select_dtypes(include=['object', 'category']).columns.tolist()
        if 'Age_Group' in df_eda.columns and df_eda['Age_Group'].dtype.name == 'category':
            categorical_cols_eda.append('Age_Group')

        logging.info(f"üî¢ C·ªôt s·ªë (numerical): {numerical_cols_eda}")
        logging.info(f"üî§ C·ªôt ph√¢n lo·∫°i (categorical): {categorical_cols_eda}")

        # Histogram cho t·ª´ng bi·∫øn s·ªë
        for col in numerical_cols_eda:
            plt.figure()
            sns.histplot(df_eda[col], kde=True, bins=30)
            plt.title(f"Ph√¢n ph·ªëi {col}")
            plt.tight_layout()
            plt.savefig(f"./results/hist_{col}.png")
            plt.close()
            logging.info(f"üìä ƒê√£ l∆∞u histogram cho '{col}'")

        # Boxplot so v·ªõi target
        for col in numerical_cols_eda:
            plt.figure()
            sns.boxplot(x=TARGET_COLUMN, y=col, data=df_eda)
            plt.xticks(rotation=45)
            plt.title(f"{col} vs {TARGET_COLUMN}")
            plt.tight_layout()
            plt.savefig(f"./results/boxplot_{col}.png")
            plt.close()
            logging.info(f"üì¶ ƒê√£ l∆∞u boxplot '{col} vs {TARGET_COLUMN}'")

        # Countplot cho c·ªôt ph√¢n lo·∫°i theo target
        for col in categorical_cols_eda:
            plt.figure(figsize=(8, 5))
            order = df_eda[col].cat.categories if df_eda[col].dtype.name == 'category' else df_eda[col].unique()
            sns.countplot(x=col, hue=TARGET_COLUMN, data=df_eda, order=order)
            plt.xticks(rotation=45)
            plt.title(f"{col} theo t·ª´ng l·ªõp c·ªßa {TARGET_COLUMN}")
            plt.tight_layout()
            plt.savefig(f"./results/countplot_{col}.png")
            plt.close()
            logging.info(f"üìä ƒê√£ l∆∞u countplot cho '{col}' ph√¢n theo {TARGET_COLUMN}")

        # M√£ h√≥a TARGET_COLUMN ƒë·ªÉ ƒë∆∞a v√†o ma tr·∫≠n t∆∞∆°ng quan
        df_eda_encoded = df_eda.copy()
        if  df_eda_encoded[TARGET_COLUMN].dtype == "object":
            df_eda_encoded[TARGET_COLUMN] = LabelEncoder().fit_transform(df_eda_encoded[TARGET_COLUMN])

        # T√≠nh ma tr·∫≠n t∆∞∆°ng quan
        correlation_matrix = df_eda_encoded[numerical_cols_eda].corr()

        plt.figure(figsize=(max(14, len(numerical_cols_eda)*0.8), max(10, len(numerical_cols_eda)*0.6)))
        sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", linewidths=.5, annot_kws={"size": 8})
        plt.title("Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c bi·∫øn s·ªë", fontsize=16)
        plt.xticks(rotation=45, ha='right')
        plt.yticks(rotation=0)
        plt.tight_layout()
        plt.savefig("./results/correlation_matrix.png")
        plt.close()

        logging.info("üßÆ ƒê√£ l∆∞u heatmap ma tr·∫≠n t∆∞∆°ng quan t·∫°i ./results/correlation_matrix.png")
 
        logging.info("‚úÖ === Ph√¢n t√≠ch kh√°m ph√° d·ªØ li·ªáu ho√†n t·∫•t ===")


                # ====== CH·ªåN C·ªòT C·∫¶N THI·∫æT ======
        selected_columns = [
            'Gender', 'Height', 'Weight', 'family_history_with_overweight',
            'FAVC', 'FCVC', 'NCP', 'CAEC', 'SMOKE', 'CH2O', 'SCC',
            'FAF', 'TUE', 'CALC', 'MTRANS', 'Age_Group', 'NObeyesdad'
        ]
        df_selected = df[selected_columns]
        logging.info(f"‚úÖ ƒê√£ ch·ªçn {len(selected_columns)} c·ªôt c·∫ßn thi·∫øt: {selected_columns}")

        # ====== XO√Å D√íNG THI·∫æU D·ªÆ LI·ªÜU ======
        before_drop = df_selected.shape[0]
        df_cleaned = df_selected.dropna()
        after_drop = df_cleaned.shape[0]
        logging.info(f"üßπ ƒê√£ lo·∫°i b·ªè {before_drop - after_drop} d√≤ng thi·∫øu d·ªØ li·ªáu")

        # ====== M√É H√ìA C√ÅC C·ªòT PH√ÇN LO·∫†I ======
        label_encoder = LabelEncoder()
        categorical_columns = df_cleaned.select_dtypes(include=['object', 'category']).columns

        for col in categorical_columns:
            original_values = list(df_cleaned[col].unique())
            df_cleaned[col] = label_encoder.fit_transform(df_cleaned[col])
            encoded_values = list(df_cleaned[col].unique())
            logging.info(f"üîÑ C·ªôt '{col}': m√£ h√≥a t·ª´ {original_values} th√†nh {encoded_values}")

        logging.info(f"‚úÖ M√£ h√≥a ho√†n t·∫•t cho c√°c c·ªôt: {list(categorical_columns)}")

        # ====== L∆ØU D·ªÆ LI·ªÜU ƒê√É X·ª¨ L√ù ======
        df_cleaned.to_csv(output_path, index=False)
        logging.info(f"üìÅ ƒê√£ l∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω t·∫°i: {output_path}")

        # ====== V·∫º HEATMAP T∆Ø∆†NG QUAN ======
        plt.figure(figsize=(14, 10))
        sns.heatmap(df_cleaned.corr(), annot=True, fmt=".2f", cmap="coolwarm")
        plt.title("Correlation Heatmap of Selected Features")
        plt.tight_layout()
        plt.savefig(heatmap_path)
        plt.close()
        logging.info(f"üñºÔ∏è ƒê√£ l∆∞u heatmap t·∫°i: {heatmap_path}")

        # ====== T√ÅCH D·ªÆ LI·ªÜU TRAIN/VAL v√† L∆ØU FILE .PKL ======
        from sklearn.model_selection import train_test_split
        import joblib

        X = df_cleaned.drop(columns=["NObeyesdad"])
        y = df_cleaned["NObeyesdad"]

        X_train, X_val, y_train, y_val = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )

        os.makedirs("data", exist_ok=True)
        joblib.dump(X_train, "data/X_train.pkl")
        joblib.dump(X_val, "data/X_val.pkl")
        joblib.dump(y_train, "data/y_train.pkl")
        joblib.dump(y_val, "data/y_val.pkl")
        joblib.dump(X.columns.tolist(), "data/feature_names.pkl")

        logging.info("‚úÖ ƒê√£ t√°ch d·ªØ li·ªáu train/val v√† l∆∞u file: X_train.pkl, X_val.pkl, y_train.pkl, y_val.pkl")

        # ====== X·ª¨ L√ù FILE TEST ======
        logging.info("üöÄ === B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu test.csv ===")

        test_output_path = "./data/processed/test_selected_cleaned.csv"
        os.makedirs(os.path.dirname(test_output_path), exist_ok=True)

        df_test_selected = df_test[selected_columns[:-1]]  # Kh√¥ng c√≥ 'NObeyesdad' trong test

        before_test_drop = df_test_selected.shape[0]
        df_test_cleaned = df_test_selected.dropna()
        after_test_drop = df_test_cleaned.shape[0]
        logging.info(f"üßπ ƒê√£ lo·∫°i b·ªè {before_test_drop - after_test_drop} d√≤ng thi·∫øu d·ªØ li·ªáu trong test.csv")

        for col in categorical_columns:
            if col in df_test_cleaned.columns:
                try:
                    df_test_cleaned[col] = label_encoder.fit(df[col]).transform(df_test_cleaned[col])
                    logging.info(f"üîÑ ƒê√£ m√£ h√≥a c·ªôt '{col}' trong test.csv theo gi√° tr·ªã t·ª´ train.csv")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ m√£ h√≥a c·ªôt '{col}' trong test.csv: {e}")

        df_test_cleaned.to_csv(test_output_path, index=False)
        logging.info(f"üìÅ ƒê√£ l∆∞u d·ªØ li·ªáu test ƒë√£ x·ª≠ l√Ω t·∫°i: {test_output_path}")

        logging.info("‚úÖ === X·ª≠ l√Ω d·ªØ li·ªáu test.csv ho√†n t·∫•t ===")
        logging.info("üéâ === QUY TR√åNH TI·ªÄN X·ª¨ L√ù HO√ÄN T·∫§T ===")

    except Exception as e:
        logging.error("‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω", exc_info=True)
        print("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra file log t·∫°i:", log_file)

if __name__ == "__main__":
    main()